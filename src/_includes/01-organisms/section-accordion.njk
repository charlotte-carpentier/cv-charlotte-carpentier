{#
=========================
   SECTION ACCORDION    
=========================
#}

{% macro renderSectionAccordion(options) %}
  {# Check if data is provided #}
  {% if options.datas %}
    {# Automatically detect data type #}
    {% set hasFaqs = options.datas.faqs is defined %}
    {% set hasLegal = options.datas.legalInformation is defined %}
    
    {# Select the right data array #}
    {% if hasFaqs %}
      {% set dataItems = options.datas.faqs %}
      {% set dataType = "faqs" %}
    {% elif hasLegal %}
      {% set dataItems = options.datas.legalInformation %}
      {% set dataType = "legal" %}
    {% else %}
      {% set dataItems = [] %}
      {% set dataType = "unknown" %}
    {% endif %}
    
    {# Find the corresponding section #}
    {% set variant = null %}
    {% for item in dataItems %}
      {% if (item.name == options.name) or (item.sectionName == options.name) %}
        {% set variant = item %}
      {% endif %}
    {% endfor %}

    {# Fallback to first item if section not found #}
    {% if not variant and dataItems[0] %}
      {% set variant = dataItems[0] %}
    {% endif %}

    {% if variant %}
      <section class="py-16 md:py-20 lg:py-24 bg-[theme(--ma-nautic-beige)]">
        <div class="container mx-auto grid grid-cols-6">
          <div class="col-start-2 col-span-4">
            {# Section title #}
            <h2 class="text-center font-black text-[20px] text-[theme(--ma-nautic-gold)] mx-auto" style="margin-bottom: 40px;">_{% if options.title %}{{ options.title }}{% else %}{% if dataType == "faqs" %}Questions fréquentes{% else %}Mentions légales{% endif %}{% endif %}</h2>

            {# Icon if defined #}
            {% if variant.iconName and options.icons and options.icons.icons %}
              {% set iconFound = false %}
              {% for icon in options.icons.icons %}
                {% if icon.name == variant.iconName and icon.src and not iconFound %}
                  <div class="flex justify-center mb-8">
                    <div class="{{ options.datas.variants.wheelIcon.containerSize }} flex items-center justify-center">
                      <div class="{{ options.datas.variants.wheelIcon.iconStyle }}">
                        {% include icon.src %}
                      </div>
                    </div>
                  </div>
                  {% set iconFound = true %}
                {% endif %}
              {% endfor %}
            {% endif %}

            {# Main content #}
            <div class="w-full">
              {% if variant.contentBlocks %}
                <div class="divide-y divide-[theme(--ma-nautic-teal)]">
                  {% for block in variant.contentBlocks %}
                    {# Traitement des superHeadings - Recherche dans la collection headings #}
                    {% for key, value in block %}
                      {% if key.startsWith('superHeading_') %}
                        {% set superHeadingData = null %}
                        {% if options.headings and options.headings.headings %}
                          {% for heading in options.headings.headings %}
                            {% if heading.name == value %}
                              {% set superHeadingData = heading %}
                            {% endif %}
                          {% endfor %}
                        {% endif %}
                        
                        <div class="py-8 first:pt-0">
                          <h3 class="font-vibur text-2xl text-[theme(--ma-nautic-blue)] mb-6">
                            {% if superHeadingData %}
                              {{ superHeadingData.text }}
                            {% else %}
                              {{ value }}
                            {% endif %}
                          </h3>
                          
                          {# Récupérer le contenu associé au superHeading #}
                          {% set contentKey = 'content_' + key.split('_')[1] %}
                          {% if block[contentKey] %}
                            {# Transformation des contenus - remplacer les strong, corriger la largeur et justifier le texte #}
                            {% set contentWithoutBold = block[contentKey] | replace("<strong>", "<span>") | replace("</strong>", "</span>") %}
                            {% set contentWithFullWidth = contentWithoutBold | replace("max-w-3xl", "w-full") | replace("mx-auto", "") %}
                            {% set contentJustified = contentWithFullWidth | replace("text-[theme(--ma-nautic-blue)]", "text-[theme(--ma-nautic-blue)] text-justify") %}
                            <div class="text-[theme(--ma-nautic-blue)] text-justify">
                              {{ contentJustified | safe }}
                            </div>
                          {% endif %}

                          {# Traitement des headings associés à ce superHeading #}
                          {% for headingKey, headingValue in block %}
                            {% if headingKey.startsWith('heading_') %}
                              {% set headingData = null %}
                              {% if options.headings and options.headings.headings %}
                                {% for heading in options.headings.headings %}
                                  {% if heading.name == headingValue %}
                                    {% set headingData = heading %}
                                  {% endif %}
                                {% endfor %}
                              {% endif %}
                              
                              {% set headingContentKey = 'content_' + headingKey.split('_')[1] %}
                              {% if block[headingContentKey] %}
                                <div class="py-4 accordion-item">
                                  <details class="group">
                                    <summary class="flex justify-between items-center font-bold cursor-pointer text-[theme(--ma-nautic-blue)] py-2 list-none">
                                      <span>
                                        {% if headingData %}
                                          {{ headingData.text }}
                                        {% else %}
                                          {{ headingValue }}
                                        {% endif %}
                                      </span>
                                      <span class="transition group-open:rotate-180">
                                        <svg fill="none" height="24" shape-rendering="geometricPrecision" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" viewBox="0 0 24 24" width="24">
                                          <path d="M6 9l6 6 6-6"></path>
                                        </svg>
                                      </span>
                                    </summary>
                                    <div class="text-[theme(--ma-nautic-blue)] text-justify mt-3 group-open:animate-fadeIn">
                                      {% set contentWithoutBold = block[headingContentKey] | replace("<strong>", "<span>") | replace("</strong>", "</span>") %}
                                      {% set contentWithFullWidth = contentWithoutBold | replace("max-w-3xl", "w-full") | replace("mx-auto", "") %}
                                      {% set contentJustified = contentWithFullWidth | replace("text-[theme(--ma-nautic-blue)]", "text-[theme(--ma-nautic-blue)] text-justify") %}
                                      {{ contentJustified | safe }}
                                    </div>
                                  </details>
                                </div>
                              {% endif %}
                            {% endif %}
                          {% endfor %}
                        </div>
                      {% endif %}
                    {% endfor %}
                    
                    {# Format spécial pour les paires question/réponse directes #}
                    {% set hasProcessedSuperHeading = false %}
                    {% for key, value in block %}
                      {% if key.startsWith('superHeading_') %}
                        {% set hasProcessedSuperHeading = true %}
                      {% endif %}
                    {% endfor %}
                    
                    {% if not hasProcessedSuperHeading and block.question is defined and block.answer is defined %}
                      <div class="py-4 accordion-item">
                        <details class="group">
                          <summary class="flex justify-between items-center font-bold cursor-pointer text-[theme(--ma-nautic-blue)] py-2 list-none">
                            <span>{{ block.question }}</span>
                            <span class="transition group-open:rotate-180">
                              <svg fill="none" height="24" shape-rendering="geometricPrecision" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" viewBox="0 0 24 24" width="24">
                                <path d="M6 9l6 6 6-6"></path>
                              </svg>
                            </span>
                          </summary>
                          <div class="text-[theme(--ma-nautic-blue)] text-justify mt-3 group-open:animate-fadeIn">
                            {% set answerWithoutBold = block.answer | replace("<strong>", "<span>") | replace("</strong>", "</span>") %}
                            {% set answerWithFullWidth = answerWithoutBold | replace("max-w-3xl", "w-full") | replace("mx-auto", "") %}
                            {% set answerJustified = answerWithFullWidth | replace("text-[theme(--ma-nautic-blue)]", "text-[theme(--ma-nautic-blue)] text-justify") %}
                            {{ answerJustified | safe }}
                          </div>
                        </details>
                      </div>
                    {% endif %}
                  {% endfor %}
                </div>
              {% endif %}

              {# Navigation link if defined #}
              {% if variant.links and options.links and options.links.links %}
                {% set linkFound = false %}
                {% for link in options.links.links %}
                  {% if link.name | lower == variant.links | lower and not linkFound %}
                    <div class="flex justify-center mt-12">
                      <a href="{{ link.href }}" class="{{ options.links.globalStyle }} {{ options.links.variants[link.style] }}">
                        {{ link.text }}
                      </a>
                    </div>
                    {% set linkFound = true %}
                  {% endif %}
                {% endfor %}
              {% endif %}
            </div>
          </div>
        </div>
      </section>
    {% else %}
      <span class="text-red-500">Section '{{ options.name }}' not found</span>
    {% endif %}
  {% else %}
    <span class="text-red-500">Section Accordion data not found</span>
  {% endif %}
{% endmacro %}

{#
============================
Summon HAT Components Wisely
============================

1. Import the macro at the top of your page
{% from "01-organisms/section-accordion.njk" import renderSectionAccordion %}

2. Call a specific section-accordion by its name
{{ renderSectionAccordion({ 
    name: "ma_faq",
    datas: faqs,
    headings: atoms.headings,
    icons: atoms.icons,
    links: atoms.links
}) }}

May your bugs be forever exiled to the shadow realm. 🧙‍♂️✨
#}