{#
=========================
         HEADER          
=========================
#}

{% from "03-atoms/vector.njk" import renderVector %}
{% from "03-atoms/icon.njk" import renderIcon %}
{% from "01-organisms/navigation.njk" import renderNavigation %}

{% macro renderHeader(options) %}
  {# Check if data is provided #}
  {% if options.datas %}
    {# Get global styling and container styles #}
    {% set globalStyle = options.datas.globalStyle %}
    {% set containerStyle = options.datas.containerStyle %}
    {% set logoContainerStyle = options.datas.logoContainerStyle | default('') %}
    {% set navContainerStyle = options.datas.navContainerStyle | default('') %}
    {% set navStyle = options.datas.navStyle %}
    {% set menuContainerStyle = options.datas.menuContainerStyle %}
    {% set toggleButtonStyle = options.datas.variants.toggleButton.default %}
    {% set toggleButtonIcon = options.datas.variants.toggleButton.icon %}
    {% set toggleButtonIconStyle = options.datas.variants.toggleButton.iconStyle | default('') %}
    {% set toggleButtonContainerSize = options.datas.variants.toggleButton.containerSize | default('w-6 h-6') %}
    {% set toggleButtonIconSize = options.datas.variants.toggleButton.iconSize | default('24') %}
    {% set dropdownMenuStyle = options.datas.variants.dropdownMenu.default %}
    
    {# Find the header configuration #}
    {% set headerData = null %}
    {% if options.name %}
      {% for headerSet in options.datas.headers %}
        {% if headerSet.name == options.name %}
          {% set headerData = headerSet %}
        {% endif %}
      {% endfor %}
    {% endif %}

    {# Fallback to first header if not found #}
    {% if not headerData %}
      {% set headerData = options.datas.headers[0] %}
    {% endif %}
    
    {# Render header with appropriate container styles #}
    <header class="{{ globalStyle }} {{ options.class | default('') }}">
      <div class="container mx-auto grid grid-cols-6 lg:grid-cols-6">
        <div class="col-span-6 lg:col-start-2 lg:col-span-4 flex justify-between items-center h-24 px-4">
          {# Logo section - Adapt√© pour √™tre responsive avec marge ajust√©e #}
          <div class="{{ logoContainerStyle }} max-lg:ml-2">
            <a href="/" title="Retour √† l'accueil" class="inline-block">
              {# Version mobile - Logo alternate #}
              <span class="lg:hidden">
                {{ renderVector({ name: "ma_logo_mini", datas: options.vectors }) }}
              </span>
              {# Version desktop - Logo main #}
              <span class="hidden lg:inline-block">
                {{ renderVector({ name: "ma_logo", datas: options.vectors }) }}
              </span>
            </a>
          </div>

          {# Navigation container avec marge ajust√©e en mobile #}
          <div class="{{ navContainerStyle }} max-lg:mr-2">
            <div class="{{ navStyle }}">
              {# Menu Container with hamburger and dropdown #}
              <div class="{{ menuContainerStyle }}">
                {# Wrapper div to contain both button and label - mobile only #}
                <div class="max-lg:flex max-lg:flex-col max-lg:items-center max-lg:relative max-lg:z-50">
                  {# Original toggle button #}
                  <div class="{{ toggleButtonStyle }}" data-container-size="{{ toggleButtonContainerSize }}" data-icon-size="{{ toggleButtonIconSize }}">
                    {% set iconData = null %}
                    {% if options.icons %}
                      {% for icon in options.icons.icons %}
                        {% if icon.name == toggleButtonIcon %}
                          {% set iconData = icon %}
                        {% endif %}
                      {% endfor %}
                    {% endif %}
                    
                    {# Render custom icon or default hamburger #}
                    {% if iconData %}
                      <span data-svg-src="{{ iconData.path }}" data-svg-width="{{ toggleButtonIconSize }}" data-svg-height="{{ toggleButtonIconSize }}" class="inline-flex items-center justify-center {{ toggleButtonIconStyle }}">
                        <!-- SVG will be loaded here -->
                      </span>
                    {% else %}
                      <span class="inline-flex items-center justify-center {{ toggleButtonIconStyle }}">
                        <svg xmlns="http://www.w3.org/2000/svg" width="{{ toggleButtonIconSize }}" height="{{ toggleButtonIconSize }}" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="3" y1="12" x2="21" y2="12"></line><line x1="3" y1="6" x2="21" y2="6"></line><line x1="3" y1="18" x2="21" y2="18"></line></svg>
                      </span>
                    {% endif %}
                  </div>
                  
                  {# Text "Menu" below - outside the button, only visible on mobile, with high z-index #}
                  <span class="text-xs mt-1 font-[theme(--font-display)] text-[theme(--ma-nautic-white)] max-lg:block hidden relative z-50">Menu</span>
                </div>

                {# Dropdown menu containing navigation #}
                <div class="{{ dropdownMenuStyle }}">
                  {# Use Navigation component #}
                  {{ renderNavigation({ 
                    name: headerData.navigation | default(headerData.name),
                    datas: options.navigations,
                    links: options.links
                  }) }}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </header>

    {# Include external JS files #}
    <script src="/js/organisms/header-menu.js"></script>
    <script src="/js/organisms/fixed-header.js"></script>
  {% else %}
    <span class="text-red-500">Header data not found</span>
  {% endif %}
{% endmacro %}

{#
============================
Summon HAT Components Wisely
============================

1. Import the macro at the top of your page
{% from "01-organisms/header.njk" import renderHeader %}

2. Call a specific header by its name
{{ renderHeader({ 
    name: "main",
    datas: organisms.headers,
    navigations: organisms.navigations,
    vectors: atoms.vectors,
    links: atoms.links,
    icons: atoms.icons
}) }}

May your bugs be forever exiled to the shadow realm. üßô‚Äç‚ôÇÔ∏è‚ú®
#}