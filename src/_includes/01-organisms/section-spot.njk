{# 
=========================
      SECTION SPOT        
=========================
#}

{% from "03-atoms/heading.njk" import renderHeading %}
{% from "03-atoms/link.njk" import renderLink %}
{% from "03-atoms/icon.njk" import renderIcon %}
{% from "01-organisms/carousel.njk" import renderCarousel %}

{% macro renderSectionSpot(options) %}
  {% if options.datas %}
    {% set globalStyle = options.datas.globalStyle | default("spot-section-container") %}
    {% set sectionStyles = options.datas.sectionStyles | default({}) %}
    {% set reversed = options.reversed | default(false) %}

    {# Définition des styles avec valeurs par défaut #}
    {% set containerStyle = sectionStyles.container | default("container mx-auto px-4 lg:px-8") %}
    {% set contentWrapperStyle = sectionStyles.contentWrapper | default("flex flex-col lg:flex-row lg:items-start lg:gap-2") %}
    {% set textContentStyle = sectionStyles.textContent | default("w-full lg:w-1/2 mb-6 lg:mb-0 text-center") %}
    {% set mediaContentStyle = sectionStyles.mediaContent | default("w-full lg:w-1/2") %}
    {% set iconWrapperStyle = sectionStyles.iconWrapper | default("flex justify-center my-0") %}
    {% set contentContainerStyle = sectionStyles.contentContainer | default("mt-4") %}
    {% set contentContainerDesktopStyle = sectionStyles.contentContainerDesktop | default("mt-4 text-center") %}
    {% set buttonWrapperStyle = sectionStyles.buttonWrapper | default("mt-6 flex justify-center") %}
    {% set indicatorsContainerStyle = sectionStyles.indicatorsContainer | default("mt-4 flex justify-center gap-2") %}

    {# Récupérer les données du spot spécifique #}
    {% set itemData = null %}
    {% for spot in options.datas.spots %}
      {% if spot.name == options.name %}
        {% set itemData = spot %}
      {% endif %}
    {% endfor %}

    {% set sectionId = "spot-section-" ~ (options.name | replace(" ", "-") | lower) %}

    {% if itemData %}
      <section id="spot-section" class="{{ globalStyle }} {{ options.class | default('') }} pb-12 pt-16 {% if not reversed %}bg-[theme(--ma-nautic-blue)]{% else %}bg-[theme(--ma-nautic-white)]{% endif %}" data-section-item="{{ options.name }}" data-section-id="{{ sectionId }}" data-reversed="{{ reversed | string }}">
        <div class="{{ containerStyle }}">
          {# Mobile layout (flex column) - Éléments centrés - Visible jusqu'au breakpoint lg #}
          <div class="lg:hidden text-center px-6 pt-8">
            {# Main Heading (heading) #}
            {% if itemData.heading and options.headings %}
              {{ renderHeading({
                name: itemData.heading,
                datas: options.headings,
                class: "{% if not reversed %}text-[theme(--ma-nautic-white)]{% else %}text-[theme(--ma-nautic-blue)]{% endif %}"
              }) }}
            {% endif %}

            {# Icon #}
            {% if itemData.iconName and options.icons %}
              <div class="{{ iconWrapperStyle }}">
                {% set iconData = null %}
                {% for icon in options.icons.icons %}
                  {% if icon.name == itemData.iconName %}
                    {% set iconData = icon %}
                  {% endif %}
                {% endfor %}

                {# Récupérer les styles d'icône spécifiques si disponibles #}
                {% set iconVariantName = itemData.iconName ~ "Icon" %}
                {% set iconDefaultClass = options.datas.variants[iconVariantName].default | default("") if options.datas.variants[iconVariantName] else "" %}
                {% set iconStyle = options.datas.variants[iconVariantName].iconStyle | default("text-[theme(--ma-nautic-teal)]") if options.datas.variants[iconVariantName] else "text-[theme(--ma-nautic-teal)]" %}
                {% set iconContainerSize = options.datas.variants[iconVariantName].containerSize | default("w-12 h-12 lg:w-16 lg:h-16") if options.datas.variants[iconVariantName] else "w-12 h-12 lg:w-16 lg:h-16" %}
                {% set iconSize = options.datas.variants[iconVariantName].iconSize | default("32") if options.datas.variants[iconVariantName] else "32" %}

                {% if iconData %}
                  <span data-svg-src="{{ iconData.path }}" data-svg-width="{{ iconSize }}" data-svg-height="{{ iconSize }}" class="inline-flex items-center justify-center {{ iconContainerSize }} {{ iconStyle }} {{ iconDefaultClass }}">
                    <!-- SVG will be loaded here -->
                  </span>
                {% else %}
                  <span class="inline-flex items-center justify-center {{ iconContainerSize }} {{ iconStyle }} {{ iconDefaultClass }}">
                    <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24" width="{{ iconSize }}" height="{{ iconSize }}" fill="currentColor"><circle cx="12" cy="12" r="10"></circle></svg>
                  </span>
                {% endif %}
              </div>
            {% endif %}

            {# Content - contentBlocks #}
            <div class="{{ contentContainerStyle }} text-center">
              <div class="{% if not reversed %}text-[theme(--ma-nautic-white)]{% else %}text-[theme(--ma-nautic-blue)]{% endif %} text-left">
                {% for block in itemData.contentBlocks %}
                  <p class="mb-4">
                    {{ block.text | safe }}
                  </p>
                {% endfor %}
              </div>
            </div>

            {# CTA Links #}
            {% if itemData.ctaLinks and options.links %}
              <div class="mt-4 flex flex-wrap justify-center gap-4">
                {% for linkItem in itemData.ctaLinks %}
                  {{ renderLink({
                    name: linkItem.name,
                    datas: options.links
                  }) }}
                {% endfor %}
              </div>
            {% endif %}
          </div>

          {# Desktop layout (two columns) - Visible à partir du breakpoint lg #}
          <div class="hidden lg:flex {% if reversed %}lg:flex-row-reverse{% else %}lg:flex-row{% endif %} items-center justify-center h-[600px] {{ contentWrapperStyle | replace('lg:flex-row', '') }}">
            {# Left column: Main Heading, Icon, Content and CTA Button #}
            <div class="w-auto min-w-[400px] max-w-[550px] min-h-[450px] mx-auto border {% if not reversed %}border-[theme(--ma-nautic-white)]{% else %}border-[theme(--ma-nautic-blue)]{% endif %} p-10 flex flex-col items-center justify-center text-center my-auto relative">
              
              {# Icône au coin de la bordure #}
              <div class="absolute top-0 left-0 transform -translate-x-1/2 -translate-y-1/2">
                {% if itemData.iconName and options.icons %}
                  {% set iconData = null %}
                  {% for icon in options.icons.icons %}
                    {% if icon.name == itemData.iconName %}
                      {% set iconData = icon %}
                    {% endif %}
                  {% endfor %}

                  {# Récupérer les styles d'icône spécifiques si disponibles #}
                  {% set iconVariantName = itemData.iconName ~ "Icon" %}
                  {% set iconStyle = "text-[theme(--ma-nautic-gold)]" %}
                  {% set iconContainerSize = "w-20 h-20" %}
                  {% set iconSize = "40" %}
                  
                  {# Adaptation des styles en fonction du mode reversed #}
                  {% if reversed %}
                    {% set bgColor = "bg-[theme(--ma-nautic-white)]" %}
                  {% else %}
                    {% set bgColor = "bg-[theme(--ma-nautic-blue)]" %}
                  {% endif %}

                  {% if iconData %}
                    <span data-svg-src="{{ iconData.path }}" data-svg-width="{{ iconSize }}" data-svg-height="{{ iconSize }}" class="inline-flex items-center justify-center {{ iconContainerSize }} {{ iconStyle }} {{ bgColor }} rounded-full p-3">
                      <!-- SVG will be loaded here -->
                    </span>
                  {% else %}
                    <span class="inline-flex items-center justify-center {{ iconContainerSize }} {{ iconStyle }} {{ bgColor }} rounded-full p-3">
                      <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 24 24" width="{{ iconSize }}" height="{{ iconSize }}" fill="currentColor"><circle cx="12" cy="12" r="10"></circle></svg>
                    </span>
                  {% endif %}
                {% endif %}
              </div>
              
              {# Main Heading (heading) #}
              {% if itemData.heading and options.headings %}
                {{ renderHeading({
                  name: itemData.heading,
                  datas: options.headings,
                  class: "{% if not reversed %}text-[theme(--ma-nautic-white)]{% else %}text-[theme(--ma-nautic-blue)]{% endif %}"
                }) }}
              {% endif %}

              {# Content - contentBlocks #}
              <div class="{{ contentContainerDesktopStyle }}">
                <div class="{% if not reversed %}text-[theme(--ma-nautic-white)]{% else %}text-[theme(--ma-nautic-blue)]{% endif %} text-left">
                  {% for block in itemData.contentBlocks %}
                    <p class="mb-4">
                      {{ block.text | safe }}
                    </p>
                  {% endfor %}
                </div>
              </div>

              {# CTA Links #}
              {% if itemData.ctaLinks and options.links %}
                <div class="mt-4 flex flex-wrap justify-center gap-4">
                  {% for linkItem in itemData.ctaLinks %}
                    {{ renderLink({
                      name: linkItem.name,
                      datas: options.links
                    }) }}
                  {% endfor %}
                </div>
              {% endif %}
            </div>

            {# Right column: Carousel #}
            <div class="{{ mediaContentStyle }} h-full flex items-center justify-center px-16">
              {% if itemData.carousel %}
                <div class="w-4/5 mx-auto">
                  {{ renderCarousel({
                    name: itemData.carousel,
                    datas: options.carousels,
                    images: options.images,
                    buttons: options.buttons,
                    class: "ma-nautic-carousel w-full"
                  }) }}
                </div>
              {% endif %}
            </div>
          </div>

          {# Carousel pour mobile #}
          {% if itemData.carousel %}
            <div class="lg:hidden mt-8">
              <div class="w-4/5 mx-auto">
                {{ renderCarousel({
                  name: itemData.carousel,
                  datas: options.carousels,
                  images: options.images,
                  buttons: options.buttons,
                  class: "ma-nautic-carousel"
                }) }}
              </div>
            </div>
          {% endif %}
        </div>
      </section>
    {% else %}
      <span class="text-red-500">Spot "{{ options.name }}" not found</span>
    {% endif %}
  {% else %}
    <span class="text-red-500">Spot data not found</span>
  {% endif %}
{% endmacro %}

{#
============================
Summon MA-NAUTIC Spot Section Wisely
============================

1. Import the macro at the top of your page
{% from "01-organisms/section-spot.njk" import renderSectionSpot %}

2. Appeler le composant pour afficher un spot spécifique
{{ renderSectionSpot({ 
    name: "agriates_desert", 
    datas: spots, 
    headings: atoms.headings, 
    links: atoms.links,
    icons: atoms.icons,
    carousels: organisms.carousels,
    images: atoms.images,
    buttons: atoms.buttons
}) }}

3. Avec mise en page inversée (colonnes inversées)
{{ renderSectionSpot({ 
    name: "cap_corse", 
    datas: spots, 
    headings: atoms.headings, 
    links: atoms.links,
    icons: atoms.icons,
    carousels: organisms.carousels,
    images: atoms.images,
    buttons: atoms.buttons,
    reversed: true
}) }}

4. Utiliser des styles personnalisés
{{ renderSectionSpot({ 
    name: "agriates_desert",
    datas: spots, 
    headings: atoms.headings, 
    links: atoms.links,
    icons: atoms.icons,
    carousels: organisms.carousels,
    images: atoms.images,
    buttons: atoms.buttons,
    class: "my-custom-spot-section-class" 
}) }}
#}