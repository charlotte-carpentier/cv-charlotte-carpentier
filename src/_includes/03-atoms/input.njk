{#
=========================
         INPUT            
=========================
#}

{% macro renderInput(options) %}
  {# Find the appropriate input configuration #}
  {% set inputData = null %}
  
  {% for input in options.datas.inputs %}
    {% if input.name == options.name %}
      {% set inputData = input %}
    {% endif %}
  {% endfor %}

  {# Set default styling and dimensions #}
  {% set globalStyle = options.datas.globalStyle %}
  {% set inputWidth = options.inputWidth | default('w-full md:w-64') %} 
  {% set inputHeight = options.inputHeight | default('py-3') %}

  {% if inputData %}
    {# Apply variant styling #}
    {% set variantStyle = options.datas.variants[inputData.style] | default('') %}
    
    <div class="flex flex-col gap-1 {{ globalStyle }} {{ variantStyle }}">
      {# Render label if provided #}
      {% if inputData.label %}
        <label for="{{ inputData.id }}" class="font-medium text-[--ma-nautic-white]">
          {{ inputData.label }}{% if inputData.required %} <span class="text-red-500">*</span>{% endif %}
        </label>
      {% endif %}

      {# Configure base styling and state variations #}
      {% set baseClasses = "border rounded-md px-3 py-2 focus:outline-none text-[#2b3947] " ~ inputWidth %}
      {% set stateClasses = {
        'default': options.datas.variants.default | default('border-gray-300'),
        'hover': options.datas.variants.hover | default('border-blue-400'),
        'focus': options.datas.variants.focus | default('border-blue-600 ring-1 ring-blue-600'),
        'active': options.datas.variants.active | default('border-blue-700'),
        'disabled': options.datas.variants.disabled | default('border-gray-200 bg-gray-100 cursor-not-allowed'),
        'filled': options.datas.variants.filled | default('border-green-500'),
        'critical': options.datas.variants.critical | default('border-red-500')
      } %}
      
      {% set inputClasses = baseClasses ~ ' ' ~ stateClasses.default %}
      
      {# Render the appropriate input type #}
      {% if inputData.type in ["text", "tel", "email", "phone"] %}
        {# Text-based inputs #}
        <input 
          type="{{ inputData.type }}" 
          id="{{ inputData.id }}" 
          name="{{ inputData.name }}" 
          placeholder="{{ inputData.placeholder }}" 
          class="{{ inputClasses }}"
          {% if inputData.pattern %}pattern="{{ inputData.pattern }}"{% endif %}
          {% if inputData.maxLength %}maxlength="{{ inputData.maxLength }}"{% endif %}
          {% if inputData.required %}required{% endif %}
          aria-required="{{ inputData.required | default(false) }}"
          aria-invalid="false"
        />
        <span 
          id="{{ inputData.id }}-error" 
          class="text-red-500 text-sm mt-1" 
          style="display: none;"
          role="alert"
        ></span>
      {% elif inputData.type == "textarea" %}
        {# Textarea input #}
        <textarea 
          id="{{ inputData.id }}" 
          name="{{ inputData.name }}" 
          placeholder="{{ inputData.placeholder }}" 
          class="{{ inputClasses }} {% if options.textareaHeight %}{{ options.textareaHeight }}{% else %}h-auto{% endif %}"
          rows="{{ options.textareaRows | default('3') }}"
          {% if inputData.maxLength %}maxlength="{{ inputData.maxLength }}"{% endif %}
          {% if inputData.required %}required{% endif %}
          aria-required="{{ inputData.required | default(false) }}"
          aria-invalid="false"
        ></textarea>
        <span 
          id="{{ inputData.id }}-error" 
          class="text-red-500 text-sm mt-1" 
          style="display: none;"
          role="alert"
        ></span>
      {% elif inputData.type in ["select", "multi-select"] %}
        {# Select dropdown #}
        <select 
          id="{{ inputData.id }}" 
          name="{{ inputData.name }}" 
          {% if inputData.type == "multi-select" %}multiple{% endif %} 
          class="{{ inputClasses }}"
          {% if inputData.required %}required{% endif %}
          aria-required="{{ inputData.required | default(false) }}"
          aria-invalid="false"
        >
          <option value="">{{ inputData.placeholder | default('S√©lectionnez une option...') }}</option>
          {% for option in inputData.options %}
            <option value="{{ option.value }}">{{ option.label }}</option>
          {% endfor %}
        </select>
        <span 
          id="{{ inputData.id }}-error" 
          class="text-red-500 text-sm mt-1" 
          style="display: none;"
          role="alert"
        ></span>
      {% endif %}

      {# Display error message if in critical state #}
      {% if inputData.state == 'critical' and inputData.errorMessage %}
        <p class="text-red-500 text-sm mt-1">{{ inputData.errorMessage }}</p>
      {% endif %}
    </div>
  {% else %}
    <span class="text-red-500">Input not found: {{ options.name }}</span>
  {% endif %}
  
  {# Include form validation script #}
  <script src="/js/atoms/form-validation.js"></script>
{% endmacro %}

{#
============================
Summon HAT Components Wisely
============================

1. Import the macro at the top of your page
{% from "03-atoms/input.njk" import renderInput %}

2. Call a specific input by its name
{{ renderInput({ name: "example_input1", datas: atoms.inputs }) }}

May your bugs be forever exiled to the shadow realm. üßô‚Äç‚ôÇÔ∏è‚ú®
#}