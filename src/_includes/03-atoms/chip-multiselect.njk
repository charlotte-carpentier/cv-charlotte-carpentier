{#
=========================
    CHIP MULTISELECT
=========================
#}

{% macro renderChipMultiselect(options) %}
  {% set chipMultiselectData = null %}
  
  {% for chipMultiselect in options.datas["chip-multiselects"] %}
    {% if chipMultiselect.name == options.name %}
      {% set chipMultiselectData = chipMultiselect %}
    {% endif %}
  {% endfor %}

  {% set globalStyle = options.datas.globalStyle %}
  
  {% if chipMultiselectData %}
    {% set baseClasses = globalStyle %}
    {% set stateClasses = {
      'default': options.datas.variants.default,
      'hover': options.datas.variants.hover,
      'focus': options.datas.variants.focus,
      'disabled': options.datas.variants.disabled
    } %}
    
    <span 
      class="{{ baseClasses }} {{ stateClasses.default }}"
      onfocus="this.className='{{ baseClasses }} {{ stateClasses.focus }}'" 
      onblur="this.className='{{ baseClasses }} {{ stateClasses.default }}'" 
      onmouseover="this.className='{{ baseClasses }} {{ stateClasses.hover }}'" 
      tabindex="0"
    >
      {{ chipMultiselectData.text }}
      <button 
        type="button" 
        class="{{ options.datas.closeButtonStyle }}"
        aria-label="Remove {{ chipMultiselectData.text }}"
      >
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-3.5 h-3.5">
          <path d="M6.28 5.22a.75.75 0 00-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 101.06 1.06L10 11.06l3.72 3.72a.75.75 0 101.06-1.06L11.06 10l3.72-3.72a.75.75 0 00-1.06-1.06L10 8.94 6.28 5.22z" />
        </svg>
      </button>
    </span>
  {% else %}
    <span class="text-red-500">Chip Multiselect not found: {{ options.name }}</span>
  {% endif %}
{% endmacro %}

{#
============================
Summon HAT Components Wisely
============================

1. Import the macro at the top of your page
{% from "03-atoms/chip-multiselect.njk" import renderChipMultiselect %}

2. Call a specific chip multiselect by its name
{{ renderChipMultiselect({ name: "fire", datas: atoms["chip-multiselects"] }) }}

3. Call multiple chip multiselects from the data
{% for chip in atoms["chip-multiselects"]["chip-multiselects"] %}
    {{ renderChipMultiselect({ 
        name: chip.name, 
        datas: atoms["chip-multiselects"] 
    }) }}
{% endfor %}

4. Direct chip multiselect creation
{{ renderChipMultiselect({
    text: "New Chip",
    variant: "default"
}) }}

5. Adding a new chip multiselect to chip-multiselects.json
{
  "chip-multiselects": [
    {
      "name": "new_chip",
      "text": "New Chip Text",
      "variant": "default"
    }
  ]
}

May your bugs be forever exiled to the shadow realm. üßô‚Äç‚ôÇÔ∏è‚ú®
#}