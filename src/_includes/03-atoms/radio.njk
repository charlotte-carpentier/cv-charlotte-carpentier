{#
=========================
         RADIO         
=========================
#}

{% macro renderRadio(options) %}
  {% set globalStyle = options.datas.globalStyle | default('') %}
  {% set fieldsetClasses = options.datas.fieldsetClasses | default('radio-group') %}
  {% set groupContainerClasses = options.datas.groupContainerClasses | default('flex space-x-4') %}
  
  {% if options.group %}
    <fieldset class="{{ fieldsetClasses }}">
      {% if options.groupLabel %}
        <legend class="{% if options.legendClasses %}{{ options.legendClasses }}{% else %}font-medium text-gray-700 mb-3{% endif %} {% if options.groupSrOnly %}sr-only{% endif %}">
          {{ options.groupLabel }}
        </legend>
      {% endif %}
      
      <div class="{{ groupContainerClasses }}">
        {% for radio in options.datas.radios %}
          {{ renderSingleRadio(radio, options.datas) }}
        {% endfor %}
      </div>
    </fieldset>
  {% else %}
    {% set radioData = null %}
    
    {% for radio in options.datas.radios %}
      {% if radio.id == options.id %}
        {% set radioData = radio %}
      {% endif %}
    {% endfor %}
    
    {% if radioData %}
      {{ renderSingleRadio(radioData, options.datas) }}
    {% else %}
      <span class="{{ options.datas.errorClasses | default('text-red-500') }}">Radio not found: {{ options.id }}</span>
    {% endif %}
  {% endif %}
{% endmacro %}

{% macro renderSingleRadio(radio, datas) %}
  {% set radioContainerClasses = datas.radioContainerClasses | default('flex items-center') %}
  {% set baseClasses = datas.baseClasses | default('size-4 rounded-full') %}
  
  {% set stateClasses = {
    'default': datas.variants.default | default('border-gray-300'),
    'hover': datas.variants.hover | default('border-gray-600'),
    'checked': datas.variants.checked | default('bg-gray-500 border-gray-500 text-white'),
    'focus': datas.variants.focus | default('border-blue-500 outline-none ring-2 ring-blue-300'),
    'disabled': datas.variants.disabled | default('bg-gray-100 border-gray-300 cursor-not-allowed'),
    'disabledChecked': datas.variants.disabledChecked | default('bg-gray-300 border-gray-300 cursor-not-allowed')
  } %}
  
  {% set inputClasses = baseClasses ~ ' ' ~ stateClasses.default %}
  
  <div class="{{ radioContainerClasses }}">
    <input 
      type="radio" 
      id="{{ radio.id }}" 
      name="{{ radio.name | default(options.groupName) }}"
      value="{{ radio.value }}"
      class="{{ inputClasses }}"
      onfocus="this.className='{{ baseClasses }} {{ stateClasses.focus }}'" 
      onblur="this.className='{{ baseClasses }} {{ stateClasses.default }}'"
      onmouseover="this.className='{{ baseClasses }} {{ stateClasses.hover }}'" 
      onclick="this.checked ? this.className='{{ baseClasses }} {{ stateClasses.checked }}' : this.className='{{ baseClasses }} {{ stateClasses.default }}'"
      {% if radio.disabled %}
        disabled 
        class="{{ baseClasses }} {% if radio.checked %}{{ stateClasses.disabledChecked }}{% else %}{{ stateClasses.disabled }}{% endif %}"
      {% endif %}
      {% if radio.checked %}checked{% endif %}
    />
  </div>
{% endmacro %}



{#
============================
Summon HAT Components Wisely
============================

1. Import the macro at the top of your page
{% from "03-atoms/radio.njk" import renderRadio %}

2. Render a single radio by ID
{{ renderRadio({ id: "radio1", datas: atoms.radios }) }}

3. Render an entire radio group
{{ renderRadio({ 
    group: true, 
    groupLabel: "Combat Style",
    groupSrOnly: false,
    datas: atoms.radios 
}) }}

4. Render a subset of radios
{% set combatStyles = [
    { "id": "option1", "name": "combat_style", "value": "fist-fighter", "ariaLabel": "Only fight barehanded" },
    { "id": "option2", "name": "combat_style", "value": "damage-tank", "ariaLabel": "Block with face" }
] %}
{{ renderRadio({ 
    group: true, 
    groupLabel: "Custom Group", 
    radios: combatStyles, 
    datas: { 
      globalStyle: atoms.radios.globalStyle, 
      variants: atoms.radios.variants,
      baseClasses: atoms.radios.baseClasses,
      radioContainerClasses: atoms.radios.radioContainerClasses
    } 
}) }}

5. Available options for each radio:
{
  "id": "unique_id",            // Unique identifier
  "name": "group_name",         // Name for the group (same across related radios)
  "value": "submission_value",  // Value for form submission
  "checked": true,              // Pre-checked state (optional)
  "disabled": false,            // Disabled state (optional)
  "ariaLabel": "Accessible label for screen readers" // (required for accessibility)
}

May your validation never fail. üêâüî•
#}