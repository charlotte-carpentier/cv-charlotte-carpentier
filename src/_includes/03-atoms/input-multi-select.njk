<!-- ========================= -->
<!--    INPUT MULTI SELECT    -->
<!-- ========================= -->

{% macro renderInputMultiSelect(options) %}
  {# Configuration and default values #}
  {% set name = options.name | default('multi-select') %}
  {% set id = options.id | default(name) %}
  {% set label = options.label | default('Select options') %}
  {% set placeholder = options.placeholder | default('Select...') %}
  {% set variant = options.variant | default('default') %}
  {% set selectOptions = options.options | default([]) %}
  {% set required = options.required | default(false) %}
  
  {# Container with custom data attributes for JS #}
  <div 
    class="input-multi-select" 
    data-select-id="{{ id }}"
    data-variant="{{ variant }}"
  >
    <label 
      for="{{ id }}" 
      class="block mb-2 text-sm font-medium text-gray-700"
    >
      {{ label }} {% if required %}*{% endif %}
    </label>
    
    {# Visual select container #}
    <div class="relative">
      <div 
        class="multi-select-control flex items-center justify-between 
               border rounded-md px-3 py-2 cursor-pointer 
               {{ variant == 'disabled' ? 'bg-gray-100 cursor-not-allowed' : 'bg-white' }}"
      >
        <div class="flex-grow flex flex-wrap gap-2 min-h-[38px]">
          {# Placeholder or selected items will be dynamically populated here #}
          <span 
            class="multi-select-placeholder text-gray-400 
                   {{ selectOptions|length > 0 ? 'hidden' : '' }}"
          >
            {{ placeholder }}
          </span>
        </div>
        
        {# Dropdown toggle #}
        <svg 
          xmlns="http://www.w3.org/2000/svg" 
          class="h-5 w-5 text-gray-400 multi-select-arrow" 
          viewBox="0 0 20 20" 
          fill="currentColor"
        >
          <path 
            fill-rule="evenodd" 
            d="M10 3a1 1 0 01.707.293l3 3a1 1 0 01-1.414 1.414L10 5.414 7.707 7.707a1 1 0 01-1.414-1.414l3-3A1 1 0 0110 3zm-3.707 9.293a1 1 0 011.414 0L10 14.586l2.293-2.293a1 1 0 011.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" 
            clip-rule="evenodd" 
          />
        </svg>
      </div>
      
      {# Hidden native select for form submission #}
      <select 
        multiple 
        id="{{ id }}" 
        name="{{ name }}" 
        class="hidden"
        {% if required %}required{% endif %}
        {% if variant == 'disabled' %}disabled{% endif %}
      >
        {% for option in selectOptions %}
          <option 
            value="{{ option.value }}"
            {% if option.selected %}selected{% endif %}
            {% if option.disabled %}disabled{% endif %}
          >
            {{ option.label }}
          </option>
        {% endfor %}
      </select>
      
      {# Dropdown options container #}
      <div 
        class="multi-select-dropdown absolute z-10 w-full 
               bg-white border rounded-md shadow-lg mt-1 hidden"
      >
        {% for option in selectOptions %}
          <label 
            class="flex items-center px-3 py-2 hover:bg-gray-100 cursor-pointer"
          >
            <input 
              type="checkbox" 
              class="mr-2 multi-select-checkbox"
              value="{{ option.value }}"
              {% if option.selected %}checked{% endif %}
              {% if option.disabled %}disabled{% endif %}
            >
            <span>{{ option.label }}</span>
          </label>
        {% endfor %}
      </div>
    </div>
  </div>
{% endmacro %}

<!-- ========================= -->
<!-- HOW TO USE THIS COMPONENT -->
<!-- ========================= -->

<!--
  Basic usage with direct options:
  {% from "03-atoms/input-multi-select.njk" import renderInputMultiSelect %}
  {{ renderInputMultiSelect({
    name: "languages",
    title: "Programming Languages",
    options: [
      { value: "js", label: "JavaScript", selected: true },
      { value: "py", label: "Python" },
      { value: "php", label: "PHP" },
      { value: "go", label: "Go", disabled: true }
    ]
  }) }}
  
  Using data from chip_multi_selects.json:
  {{ renderInputMultiSelect({
    dataKey: "geek_languages"
  }) }}
  
  Notes:
  - Don't forget to include the JS file in your template: <script src="/js/atoms/input-multi-select.js"></script>
  - This component creates a standard multiple select with synchronized chips
  - Chips allow for easy visualization and removal of selected options
-->