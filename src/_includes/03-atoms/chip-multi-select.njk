<!-- ========================= -->
<!--    CHIP MULTI SELECT    -->
<!-- ========================= -->

{% macro renderChipMultiSelect(options) %}
  {# Extract needed properties with defaults #}
  {% set name = options.name | default('chip-select') %}
  {% set title = options.title | default('Select options') %}
  {% set variant = options.variant | default('default') %}
  {% set chipOptions = options.options | default([]) %}
  
  {# Get variant styles from the chip_multi_select.json file #}
  {% set variantStyles = chip_multi_select.variants[variant] %}
  
  {# If variant doesn't exist, use default #}
  {% if not variantStyles %}
    {% set variantStyles = chip_multi_select.variants.default %}
  {% endif %}

  <div class="chip-multi-select">
    {# Title for the chip group #}
    {% if title %}
      <label class="block text-sm font-medium text-gray-700 mb-2">{{ title }}</label>
    {% endif %}
    
    {# Container for all chips #}
    <div class="{{ variantStyles.container }}" role="group" aria-label="{{ title }}">
      {% for option in chipOptions %}
        {# Hidden input to store selection state #}
        <input 
          type="checkbox" 
          id="{{ name }}-{{ option.value }}" 
          name="{{ name }}[]" 
          value="{{ option.value }}" 
          {% if option.selected %}checked{% endif %} 
          class="sr-only" 
        />
        
        {# Chip label that acts as the visual control #}
        <label 
          for="{{ name }}-{{ option.value }}" 
          class="{{ variantStyles.chip.base }} {% if option.selected %}{{ variantStyles.chip.selected }}{% else %}{{ variantStyles.chip.unselected }}{% endif %}"
          role="checkbox"
          aria-checked="{{ option.selected }}"
          tabindex="0"
        >
          {{ option.label }}
        </label>
      {% endfor %}
    </div>
  </div>
{% endmacro %}

<!-- ========================= -->
<!-- HOW TO USE THIS COMPONENT -->
<!-- ========================= -->

<!--
  Complete documentation in Storybook
  Basic usage: {% from "03-atoms/chip-multi-select.njk" import renderChipMultiSelect %}
               {{ renderChipMultiSelect(chip_multi_selects.chip_multi_select_data.geek_languages) }}
  
  Features:
  - Multiple selection through checkbox inputs
  - Automatic state styling based on selection
  - Fully accessible with keyboard support
  - Configurable variants for different visual styles
-->

<!-- Add simple JavaScript to make it interactive -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Handle keyboard navigation
    document.querySelectorAll('.chip-multi-select label[role="checkbox"]').forEach(chip => {
      chip.addEventListener('keydown', function(e) {
        if (e.key === ' ' || e.key === 'Enter') {
          e.preventDefault();
          const input = document.getElementById(this.getAttribute('for'));
          input.checked = !input.checked;
          
          // Update the aria-checked attribute
          this.setAttribute('aria-checked', input.checked);
          
          // Toggle the selected class
          const variantClasses = this.className.split(' ');
          const baseClasses = variantClasses.filter(cls => 
            !cls.includes('bg-') && !cls.includes('text-') && !cls.includes('hover:')
          ).join(' ');
          
          // Find the variant being used
          const variantMatch = this.className.match(/bg-(\w+)-\d+/);
          const variant = variantMatch ? variantMatch[1] : 'gray';
          
          if (input.checked) {
            // Apply selected styles based on variant
            if (variant === 'yellow') {
              this.className = `${baseClasses} bg-yellow-500 text-black hover:bg-yellow-600`;
            } else if (variant === 'green') {
              this.className = `${baseClasses} bg-green-500 text-white hover:bg-green-600`;
            } else if (variant === 'blue') {
              this.className = `${baseClasses} bg-blue-500 text-white hover:bg-blue-600`;
            } else {
              this.className = `${baseClasses} bg-red-500 text-white hover:bg-red-600`;
            }
          } else {
            // Apply unselected styles
            this.className = `${baseClasses} bg-gray-200 text-gray-700 hover:bg-gray-300`;
          }
        }
      });
    });
  });
</script>