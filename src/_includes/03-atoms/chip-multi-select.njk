<!-- ========================= -->
<!--    CHIP MULTI SELECT    -->
<!-- ========================= -->

{% macro renderChipMultiSelect(options) %}
  {# Extract needed properties with defaults #}
  {% set name = options.name | default('chip-select') %}
  {% set title = options.title | default('Select options') %}
  {% set variant = options.variant | default('default') %}
  {% set chipOptions = options.options | default([]) %}
  
  {# Get variant styles from the chip_multi_select.json file #}
  {% set variantStyles = chip_multi_select.variants[variant] %}
  
  {# If variant doesn't exist, use default #}
  {% if not variantStyles %}
    {% set variantStyles = chip_multi_select.variants.default %}
  {% endif %}

  <div class="chip-multi-select">
    {# Title for the chip group #}
    {% if title %}
      <label class="block text-sm font-medium text-gray-700 mb-2">{{ title }}</label>
    {% endif %}
    
    {# Container for all chips #}
    <div class="{{ variantStyles.container }}" role="group" aria-label="{{ title }}">
      {% for option in chipOptions %}
        {# Hidden input to store selection state #}
        <input 
          type="checkbox" 
          id="{{ name }}-{{ option.value }}" 
          name="{{ name }}[]" 
          value="{{ option.value }}" 
          {% if option.selected %}checked{% endif %} 
          class="sr-only" 
        />
        
        {# Chip label that acts as the visual control #}
        <label 
          for="{{ name }}-{{ option.value }}" 
          class="{{ variantStyles.chip.base }} {% if option.selected %}{{ variantStyles.chip.selected }}{% else %}{{ variantStyles.chip.unselected }}{% endif %}"
          role="checkbox"
          aria-checked="{{ option.selected }}"
          tabindex="0"
        >
          {{ option.label }}
        </label>
      {% endfor %}
    </div>
  </div>
{% endmacro %}

<!-- ========================= -->
<!-- HOW TO USE THIS COMPONENT -->
<!-- ========================= -->

<!--
  Complete documentation in Storybook
  Basic usage: {% from "03-atoms/chip-multi-select.njk" import renderChipMultiSelect %}
               {{ renderChipMultiSelect(chip_multi_selects.chip_multi_select_data.geek_languages) }}
  
  Features:
  - Multiple selection through checkbox inputs
  - Automatic state styling based on selection
  - Fully accessible with keyboard support
  - Configurable variants for different visual styles
-->